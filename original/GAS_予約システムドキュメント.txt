────────────────────
【タイトル】LINE予約フォーム → GAS → Googleカレンダー 連携マニュアル
────────────────────

■ できること（挙動の要約）

予約フォームから送られたメッセージをWebhookで受信し、GASが内容を解析。

メニューに応じた「所要時間」を自動計算し、希望日時にGoogleカレンダーへイベント作成。

ユーザーから「予約確認」「予約をキャンセル」を受け付け、未来の予約を照会・キャンセル。

カレンダーのイベント「場所」に保存した識別ID（= LINE userId）で、該当ユーザーの予約だけを判定。

カレンダーに「営業日」イベントがある日は、その時間枠内のみ予約許可（無ければ既定の営業時間内で受付）。 

■ 事前に用意するもの

LINE公式アカウント（Messaging API有効）

LINE Developers で取得したチャネルアクセストークン（長期）

Googleアカウント（Google Apps Script、Googleカレンダー利用権限）

予約を登録するGoogleカレンダーの「カレンダーID」

────────────────────
【STEP1】GASプロジェクトを作る
────────────────────
A. Googleドライブ →「新規」→「その他」→「Google Apps Script」
B. エディタが開いたら、"GAS_予約システム.txt"のGASコード全体を貼り付ける。
C. 冒頭の定数を差し替える（必須）：

// 差し替え：あなたの値に変更
const CHANNEL_ACCESS_TOKEN = '（LINEのチャネルアクセストークン）';
const CALENDAR_ID = '（予約を書き込むGoogleカレンダーID）';


カレンダーIDの確認：Googleカレンダー → 設定 → 対象カレンダー →「カレンダーの統合」→「カレンダーID」

D.予約確認、予約をキャンセル、予約フォームの各カードタイプメッセージの"text: '店舗名',"の変更と、
"backgroundColor: '#0367D3'",の色変更を行う。

E.182行のif (futureEvents.length > 0) {の数値を変えることで、1ユーザーの同時予約数を変えることができます。
0は最大1予約。予約された日付を超えると未来の予約数が0になるので再度予約可能になります。

F.256行のif (events.filter(event => event.getTitle() !== '営業日').length < 1) {の数値を変えると、
同時刻にイベントを作成できるイベント数を変更できます。1は最大1までなので、同時刻に2つ以上の予約をされると"埋まっています"
と応答メッセージが返ってきます。

G.688行からは予約フォームから送られてきた内容を取得するコードになります。
主に700行目のメニュー名と所要時間を変えます。
722行目はオプションのメニュー名と所要時間になります。

保存（Ctrl/Cmd + S）しておく。 

────────────────────
【STEP2】GASをWebアプリとしてデプロイ
────────────────────

右上［デプロイ］→［新しいデプロイ］

種類：［ウェブアプリ］

説明：任意、実行するアプリ：このプロジェクトのスクリプト

アクセスできるユーザー：「全員（匿名可）」または「全員」

［デプロイ］→ 表示された「ウェブアプリURL」をコピー（＝Webhook先URLになる）

※ 初回はGoogleから権限承認ダイアログが出るので、指示通りに許可。

────────────────────
【STEP3】LINE Developers でWebhook連携
────────────────────

LINE Developers コンソール → 対象チャネル

Messaging API設定へ

「Webhook URL」に STEP2 でコピーしたGASのウェブアプリURLを貼り付けて保存

「Webhookの利用」を［有効］にする

────────────────────
【STEP4】予約フォーム（ユーザー送信メッセージ）の書式
────────────────────
GASの解析ロジックに合わせ、ユーザーには下記フォーマットで送信してもらいます。
先頭が「【予約フォーム】」で始まることが必須です。

（テンプレそのまま配布OK）

【予約フォーム】
お名前：山田太郎
電話番号：090-1234-5678
メニュー：洋装プランB, 眉カット
ご来店回数：はじめて
コース：A
希望日時：
2025年08月30日 14:00
メッセージ：
希望が14時台だと助かります。


ポイント

日付形式は「YYYY年MM月DD日 HH:mm」（例：2025年08月30日 14:00）。

「メニュー：」はカンマ区切りで複数指定OK（メイン＋オプション）。 

────────────────────
【STEP5】予約・照会・キャンセルの使い方（ユーザー向けコマンド）
────────────────────

予約する：上記「【予約フォーム】〜」のテンプレで送信

（⇩リッチメニューのボタンで送信するようになっています。）
予約内容の確認：予約確認
→ 未来の予約一覧（あなたの予約だけ）をカードで返信

（⇩リッチメニューのボタンで送信するようになっています。）
キャンセルの開始：予約をキャンセル
→ 候補一覧＋ボタンが送られます。「予約 1をキャンセルする」等をタップ

直接キャンセル実行：キャンセル: 0（番号は0始まり）

制限：開始時刻の24時間以内はキャンセル不可（ガードあり） 
（566行のコードで処理） 

────────────────────
【営業時間の扱い】
────────────────────

対象日のカレンダーにタイトル「営業日」のイベントがあれば、予約フォーム上でそのイベントの開始〜終了の範囲だけ予約可。

「営業日」イベントが無い日は、既定の営業時間（曜日ごとの開店3:00〜閉店22:00）を採用。

予約は「現在より未来で、1年以内」の希望のみ受付。

同時間帯に「予約」以外のブロック（例：別イベント）があると予約不可。

カレンダーのイベント「場所」にLINEのuserIdを保存し、これを識別IDとして検索・照会します。 

────────────────────
【返信メッセージ（Flex）仕様】
────────────────────

予約完了/確認/キャンセル結果はFlex Messageで見やすく返信。

「予約確認」ではお名前・予約日時・メニューを整形して返します。

見つからない場合は「現在LINEでされた予約が見つかりませんでした。」と返答。 

────────────────────
【テスト手順（おすすめ）】
────────────────────

LINE側でWebhook有効、GAS URL設定済みか再確認

自分のLINEから公式アカへ以下を順に送信

「予約確認」→（初回は予約なし想定の返答）

「【予約フォーム】」テンプレを埋めて送信 → 予約完了カードが返ればOK

「予約確認」→ 作成された予約が表示されること

「予約をキャンセル」→ 表示されたボタンをタップ → キャンセル完了メッセージ

Googleカレンダーで実際にイベントが作成・削除されていることを確認

────────────────────
【運用のコツ／よくあるハマり】
────────────────────

Webhookが反応しない
→ LINE側のWebhook「有効」／URLの貼り間違い／GASの権限未承認を確認。

予約が入らない
→ 希望日時の形式ミス（半角コロン、全角スペースに注意）／営業時間外／既存イベントとバッティング。

キャンセルできない
→ 開始24時間以内は不可仕様。カレンダーで手動対応が必要な場合あり。

メニュー時間が合わない
→ コード内の所要時間テーブルにメニュー名を正確に合わせる（完全一致）。

予約確認で他人の予約が混ざる
→ イベント「場所」に保存されるuserIdが識別キー。既存の手動イベントにuserIdが入っていると混ざるため注意。既存予定には検索に引っかからない文言運用や別カレンダー分離が無難。 

────────────────────
【カスタマイズの入口（必要に応じて）】
────────────────────

メニュー名と所要時間の対応表を追記・変更

休憩時間や定休日の判定ロジック調整（例：日曜休業、昼休憩の時間帯除外など）
（ただ、こちらは予約フォームのカレンダーの内部処理で○×を設定しているので変更する必要は特になし）

予約重複許容量（現状「同時間帯は1件のみ」想定）を増やす

返信メッセージの文言・デザイン（Flex）変更

────────────────────
【最小編集サマリ（実作業チェックリスト）】
────────────────────
□ GASコードを貼る
□ CHANNEL_ACCESS_TOKEN を差し替え
□ CALENDAR_ID を差し替え
□ WebアプリとしてデプロイしURL取得
□ LINE DevelopersにWebhook URL設定＆有効化
□ 実機テスト（予約→確認→キャンセル）
□ 営業日イベントの運用ルールを決める
