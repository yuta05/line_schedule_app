name: Deploy GAS

on:
  repository_dispatch:
    types: [deploy-gas]
  workflow_dispatch:
    inputs:
      app:
        description: 'GAS app to deploy (availability, reservation, reminder)'
        required: true
        type: choice
        options:
        - availability
        - reservation
        - reminder
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
        - dev
        - prod
      tenantId:
        description: 'Tenant ID'
        required: true
        default: 'sample-store'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Get parameters
        id: params
        run: |
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "app=${{ github.event.client_payload.app }}" >> $GITHUB_OUTPUT
            echo "environment=${{ github.event.client_payload.environment }}" >> $GITHUB_OUTPUT
            echo "tenantId=${{ github.event.client_payload.tenantId }}" >> $GITHUB_OUTPUT
          else
            echo "app=${{ github.event.inputs.app }}" >> $GITHUB_OUTPUT
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "tenantId=${{ github.event.inputs.tenantId }}" >> $GITHUB_OUTPUT
          fi
          
      - name: Debug parameters
        run: |
          echo "App: ${{ steps.params.outputs.app }}"
          echo "Environment: ${{ steps.params.outputs.environment }}"
          echo "Tenant ID: ${{ steps.params.outputs.tenantId }}"
          
      - name: Install clasp
        run: npm install -g @google/clasp
        
      - name: Setup Google credentials
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          echo "$GOOGLE_CREDENTIALS" > ~/.clasprc.json
          
      - name: Deploy GAS
        env:
          TENANT_ID: ${{ steps.params.outputs.tenantId }}
          APP: ${{ steps.params.outputs.app }}
          ENVIRONMENT: ${{ steps.params.outputs.environment }}
        run: |
          echo "Deploying $APP for $TENANT_ID ($ENVIRONMENT)"
          
          # Convert to uppercase and replace hyphens with underscores
          TENANT_UPPER=$(echo "$TENANT_ID" | tr '[:lower:]' '[:upper:]' | tr '-' '_')
          APP_UPPER=$(echo "$APP" | tr '[:lower:]' '[:upper:]')
          ENV_UPPER=$(echo "$ENVIRONMENT" | tr '[:lower:]' '[:upper:]')
          
          # Build environment variable name
          SCRIPT_ID_VAR="${TENANT_UPPER}_GAS_${APP_UPPER}_SCRIPT_ID_${ENV_UPPER}"
          
          echo "Looking for environment variable: $SCRIPT_ID_VAR"
          
          # Get script ID from secrets
          case "$SCRIPT_ID_VAR" in
            "SAMPLE_STORE_GAS_AVAILABILITY_SCRIPT_ID_DEV")
              SCRIPT_ID="${{ secrets.SAMPLE_STORE_GAS_AVAILABILITY_SCRIPT_ID_DEV }}"
              ;;
            "SAMPLE_STORE_GAS_RESERVATION_SCRIPT_ID_DEV")
              SCRIPT_ID="${{ secrets.SAMPLE_STORE_GAS_RESERVATION_SCRIPT_ID_DEV }}"
              ;;
            "SAMPLE_STORE_GAS_REMINDER_SCRIPT_ID_DEV")
              SCRIPT_ID="${{ secrets.SAMPLE_STORE_GAS_REMINDER_SCRIPT_ID_DEV }}"
              ;;
            *)
              echo "Error: Unknown script ID variable: $SCRIPT_ID_VAR"
              exit 1
              ;;
          esac
          
          if [ -z "$SCRIPT_ID" ]; then
            echo "Error: Script ID not found for $SCRIPT_ID_VAR"
            exit 1
          fi
          
          echo "Using Script ID: $SCRIPT_ID"
          
          # Navigate to appropriate GAS app directory
          cd "apps/gas-${APP}"
          
          # Deploy using clasp
          clasp push --scriptId "$SCRIPT_ID"
          clasp deploy --scriptId "$SCRIPT_ID" --description "Auto-deploy $(date)"
          
          echo "Deployment completed successfully!"
