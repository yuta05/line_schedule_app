name: Deploy GAS

on:
  repository_dispatch:
    types: [deploy-gas]
  workflow_dispatch:
    inputs:
      app:
        description: 'GAS app to deploy (availability, reservation, reminder)'
        required: true
        type: choice
        options:
        - availability
        - reservation
        - reminder
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
        - dev
        - prod
      tenantId:
        description: 'Tenant ID'
        required: true
        default: 'sample-store'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Get parameters
        id: params
        run: |
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "app=${{ github.event.client_payload.app }}" >> $GITHUB_OUTPUT
            echo "environment=${{ github.event.client_payload.environment }}" >> $GITHUB_OUTPUT
            echo "tenantId=${{ github.event.client_payload.tenantId }}" >> $GITHUB_OUTPUT
          else
            echo "app=${{ github.event.inputs.app }}" >> $GITHUB_OUTPUT
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "tenantId=${{ github.event.inputs.tenantId }}" >> $GITHUB_OUTPUT
          fi
          
      - name: Debug parameters
        run: |
          echo "App: ${{ steps.params.outputs.app }}"
          echo "Environment: ${{ steps.params.outputs.environment }}"
          echo "Tenant ID: ${{ steps.params.outputs.tenantId }}"
          
      - name: Install clasp
        run: npm install -g @google/clasp
        
      - name: Setup Google credentials and Deploy
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          TENANT_ID: ${{ steps.params.outputs.tenantId }}
          APP: ${{ steps.params.outputs.app }}
          ENVIRONMENT: ${{ steps.params.outputs.environment }}
        run: |
          echo "Deploying $APP for $TENANT_ID ($ENVIRONMENT)"
          
          # Convert to uppercase and replace hyphens with underscores
          TENANT_UPPER=$(echo "$TENANT_ID" | tr '[:lower:]' '[:upper:]' | tr '-' '_')
          APP_UPPER=$(echo "$APP" | tr '[:lower:]' '[:upper:]')
          ENV_UPPER=$(echo "$ENVIRONMENT" | tr '[:lower:]' '[:upper:]')
          
          # Build environment variable name
          SCRIPT_ID_VAR="${TENANT_UPPER}_GAS_${APP_UPPER}_SCRIPT_ID_${ENV_UPPER}"
          
          echo "Looking for environment variable: $SCRIPT_ID_VAR"
          
          # Get script ID from secrets
          case "$SCRIPT_ID_VAR" in
            "SAMPLE_STORE_GAS_AVAILABILITY_SCRIPT_ID_DEV")
              SCRIPT_ID="${{ secrets.SAMPLE_STORE_GAS_AVAILABILITY_SCRIPT_ID_DEV }}"
              ;;
            "SAMPLE_STORE_GAS_RESERVATION_SCRIPT_ID_DEV")
              SCRIPT_ID="${{ secrets.SAMPLE_STORE_GAS_RESERVATION_SCRIPT_ID_DEV }}"
              ;;
            "SAMPLE_STORE_GAS_REMINDER_SCRIPT_ID_DEV")
              SCRIPT_ID="${{ secrets.SAMPLE_STORE_GAS_REMINDER_SCRIPT_ID_DEV }}"
              ;;
            *)
              echo "Error: Unknown script ID variable: $SCRIPT_ID_VAR"
              exit 1
              ;;
          esac
          
          if [ -z "$SCRIPT_ID" ]; then
            echo "Error: Script ID not found for $SCRIPT_ID_VAR"
            exit 1
          fi
          
          echo "Using Script ID: $SCRIPT_ID"
          
          # Install jq for JSON processing
          sudo apt-get update && sudo apt-get install -y jq
          
          # Extract service account credentials
          echo "$GOOGLE_CREDENTIALS" > /tmp/service-account.json
          CLIENT_EMAIL=$(jq -r '.client_email' /tmp/service-account.json)
          PRIVATE_KEY=$(jq -r '.private_key' /tmp/service-account.json)
          
          echo "Service account email: $CLIENT_EMAIL"
          
          # Create JWT token for Google API authentication
          NODE_SCRIPT=$(cat << 'EOF'
          const fs = require('fs');
          const crypto = require('crypto');
          
          const serviceAccount = JSON.parse(fs.readFileSync('/tmp/service-account.json', 'utf8'));
          const now = Math.floor(Date.now() / 1000);
          
          const header = { alg: 'RS256', typ: 'JWT' };
          const payload = {
            iss: serviceAccount.client_email,
            scope: 'https://www.googleapis.com/auth/script.projects',
            aud: 'https://oauth2.googleapis.com/token',
            exp: now + 3600,
            iat: now
          };
          
          const base64url = (obj) => Buffer.from(JSON.stringify(obj)).toString('base64').replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_');
          const toSign = base64url(header) + '.' + base64url(payload);
          
          const sign = crypto.createSign('RSA-SHA256');
          sign.update(toSign);
          const signature = sign.sign(serviceAccount.private_key, 'base64').replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_');
          
          console.log(toSign + '.' + signature);
          EOF
          )
          
          JWT=$(node -e "$NODE_SCRIPT")
          
          # Get access token
          ACCESS_TOKEN_RESPONSE=$(curl -s -X POST https://oauth2.googleapis.com/token \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer&assertion=$JWT")
          
          ACCESS_TOKEN=$(echo "$ACCESS_TOKEN_RESPONSE" | jq -r '.access_token')
          
          if [ "$ACCESS_TOKEN" = "null" ] || [ -z "$ACCESS_TOKEN" ]; then
            echo "Failed to get access token:"
            echo "$ACCESS_TOKEN_RESPONSE"
            exit 1
          fi
          
          echo "Successfully obtained access token"
          
          # Navigate to appropriate GAS app directory
          cd "apps/gas-${APP}"
          
          # Read the source code
          if [ ! -f "src/Code.ts" ]; then
            echo "Error: src/Code.ts not found"
            exit 1
          fi
          
          SOURCE_CODE=$(cat src/Code.ts)
          
          # Read the manifest file
          if [ ! -f "appsscript.json" ]; then
            echo "Error: appsscript.json not found"
            exit 1
          fi
          
          MANIFEST_CONTENT=$(cat appsscript.json)
          
          # Update the GAS project using Google Apps Script API
          UPDATE_RESPONSE=$(curl -s -X PUT \
            "https://script.googleapis.com/v1/projects/$SCRIPT_ID/content" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{
              \"files\": [
                {
                  \"name\": \"appsscript\",
                  \"type\": \"JSON\",
                  \"source\": $(echo "$MANIFEST_CONTENT" | jq -R -s .)
                },
                {
                  \"name\": \"Code\",
                  \"type\": \"SERVER_JS\",
                  \"source\": $(echo "$SOURCE_CODE" | jq -R -s .)
                }
              ]
            }")
          
          echo "Update response: $UPDATE_RESPONSE"
          
          # Create a new version
          VERSION_RESPONSE=$(curl -s -X POST \
            "https://script.googleapis.com/v1/projects/$SCRIPT_ID/versions" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"description\": \"Auto-deploy $(date)\"}")
          
          echo "Version response: $VERSION_RESPONSE"
          
          VERSION_NUMBER=$(echo "$VERSION_RESPONSE" | jq -r '.versionNumber')
          
          if [ "$VERSION_NUMBER" != "null" ] && [ -n "$VERSION_NUMBER" ]; then
            echo "Created version: $VERSION_NUMBER"
            
            # Create deployment
            DEPLOY_RESPONSE=$(curl -s -X POST \
              "https://script.googleapis.com/v1/projects/$SCRIPT_ID/deployments" \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{
                \"deploymentConfig\": {
                  \"versionNumber\": $VERSION_NUMBER,
                  \"manifestFileName\": \"appsscript\",
                  \"description\": \"Auto-deploy $(date)\"
                }
              }")
            
            echo "Deploy response: $DEPLOY_RESPONSE"
            
            # Extract Web App URL if available
            WEB_APP_URL=$(echo "$DEPLOY_RESPONSE" | jq -r '.entryPoints[]? | select(.entryPointType == "WEB_APP") | .webApp.url' 2>/dev/null || echo "")
            
            if [ -n "$WEB_APP_URL" ] && [ "$WEB_APP_URL" != "null" ]; then
              echo "Web App URL: $WEB_APP_URL"
              # TODO: Update environment variables with the Web App URL
            fi
            
            echo "Deployment completed successfully!"
          else
            echo "Failed to create version"
            exit 1
          fi
